@model IEnumerable<PhoneBook.Api.Models.EntryViewModel>
@{
    ViewData["Title"] = "Entries";
}

<div class="text-center">
    <h1 class="display-4">@ViewData["PhoneBookName"]</h1>
    <p>Learn about how to use this system in the <a asp-controller="PhoneBooks" asp-action="Help">Help</a> section.</p>
    <p>
        @Html.ActionLink("<< Back to Phone Book List", "Index", "PhoneBooks", null, htmlAttributes: new { @class = "btn btn-secondary" })&nbsp;
        | @Html.ActionLink("Create New Entry", "Create", new { id = ViewData["PhoneBookId"] }, htmlAttributes: new { @class = "btn btn-default btn-primary" })
    </p>

    <form asp-action="Index" method="get">
        <div class="form-actions no-color">
            <p>
                Find by (first/last) name: <input type="text" name="SearchString" value="@ViewData["CurrentFilter"]" />
                <input type="submit" value="Search" class="btn btn-outline-primary" />&nbsp;|
                @if (!String.IsNullOrEmpty((string?)ViewData["CurrentFilter"]))
                {
                    <a asp-action="Index" class="btn btn-outline-secondary">Clear Search</a>
                }
            </p>
        </div>
    </form>

    <table class="table">
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.FirstName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.LastName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PhoneNumber)
            </th>
            <th></th>
        </tr>

        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.FirstName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.LastName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PhoneNumber)
                </td>
                <td>
                    @if (ViewData["IdToDelete"] != null && item.Id == (int?)ViewData["IdToDelete"])
                    {
                        <div class="btn-group">
                            <a asp-action="ConfirmDelete" asp-route-id="@ViewData["PhoneBookId"]" asp-route-confirmDelete="@ViewData["IdToDelete"]" class="btn btn-outline-danger">Delete</a>
                            <a asp-action="Index" asp-route-id="@ViewData["PhoneBookId"]" class="btn btn-secondary">Cancel</a>
                        </div>
                    }
                    else
                    {
                        <div>
                            @Html.ActionLink("Edit", "Edit", new { id = item.Id, PhoneBookId = ViewData["PhoneBookId"] }, htmlAttributes: new { @class = "btn btn-outline-warning" }) |
                            @Html.ActionLink("X", "Delete", new { id = item.Id, PhoneBookId = ViewData["PhoneBookId"], searchString = ViewData["CurrentFilter"] }, htmlAttributes: new { @class = "btn btn-outline-danger" })
                        </div>
                    }
                </td>
            </tr>
        }

    </table>
</div>
